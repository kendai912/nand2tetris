// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[3..5], a=ram0, b=ram1, c=ram2, d=ram3, e=ram4, f=ram5, g=ram6, h=ram7);
    RAM8(in=in, load=ram0, address=address[0..2], out=ram0out);
    RAM8(in=in, load=ram1, address=address[0..2], out=ram1out);
    RAM8(in=in, load=ram2, address=address[0..2], out=ram2out);
    RAM8(in=in, load=ram3, address=address[0..2], out=ram3out);
    RAM8(in=in, load=ram4, address=address[0..2], out=ram4out);
    RAM8(in=in, load=ram5, address=address[0..2], out=ram5out);
    RAM8(in=in, load=ram6, address=address[0..2], out=ram6out);
    RAM8(in=in, load=ram7, address=address[0..2], out=ram7out);

    Mux8Way16(a=ram0out, b=ram1out, c=ram2out, d=ram3out, e=ram4out, f=ram5out, g=ram6out, h=ram7out, sel=address[3..5], out=out);
}