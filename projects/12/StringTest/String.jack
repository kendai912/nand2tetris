// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array string;
    field int maxLen, length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength > 0) {
            let string = Array.new(maxLength);
            let maxLen = maxLength;
            let length = 0;
        }
        
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if(~(maxLen = 0)) {
            do string.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let string[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length = maxLen) {
            return this;
        }

        let string[length] = c;
        let length = length + 1;

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let string[length - 1] = 32;
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int charNum, len, sum, digit, negFlag;

        let sum = 0;
        let len = length;
        let digit = 1;

        while(len > 0) {
            let charNum = string[len - 1];
            if(charNum = 45) {
                let negFlag = 1;
            } else {
                let sum = sum + ((charNum - 48) * digit);
                let digit = digit * 10;
            }
            let len = len - 1;
        }

        if(negFlag = 1) {
            return -sum;
        }
        return sum;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int intChar, len, digitLen, digit;

        let length = 0;
        if(val < 0) {
             do appendChar(45);
             let val = -val;
        }

        let len = maxLen - 1;
        while(len > 0) {
            let intChar = 0;
            let digit = 1;
            let digitLen = len;
            while(digitLen > 1) {
                let digit = digit * 10;
                let digitLen = digitLen - 1;
            }

            if(val > 29999) {
                let intChar = 4;
            } else {
                while(~((intChar * digit) > val) ) {
                    let intChar = intChar + 1;
                }
            }

            if(~(intChar = 0)) {
                let intChar = intChar - 1;
            }

            let val = val - (intChar * digit);
            do appendChar(48 + intChar);
            let len = len - 1;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
