// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, heap, freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = heap;
        let heap[0] = 0; // next
        let heap[1] = 14334; // length

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array freeListPointer, block;
        var int originalSize;

        let freeListPointer = freeList;

        // search freeList
        while(freeListPointer[1] < size + 2) {
            // if no such segment, return failure
            if(freeListPointer[0] = 0) {
                return 0;
            }
            let freeListPointer = freeListPointer[0];
        }

        // if found
        let block = freeListPointer;

        // update the freeList
        let originalSize = freeList[1];
        let freeList = freeList + size + 2;
        let freeList[0] = 0;
        let freeList[1] = originalSize - size - 2;

        // update the fields of block
        let block[0] = 0;
        let block[1] = size;

        return block; 

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array freeListPointer, block;

        // search the end of freeList
        let freeListPointer = freeList;
        while(~(freeListPointer[0] = 0)) {
            let freeListPointer = freeListPointer[0];
        }

        // append object to the end of the freeList
        let freeListPointer[0] = o;

        // update the fields of o
        let o[0] = 0;

        return;
    }    
}
